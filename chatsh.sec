#!/bin/bash
# Usage: ./chat.sh <init, post, show, connect, push> <args>

set -e  # Exit on error

#######################################
# Initialize a Git repo with user branch and deterministic first commit
# Arguments:
#   username
#######################################
init() {
  name=$1
  repoDir="$name"

  mkdir -p "$repoDir"
  cd "$repoDir"

  git init --initial-branch "$name"
  git config user.name "$name"
  git config user.email "$name@mail.com"

  tree_hash=$(echo -n "" | git mktree)

  commit_hash=$(GIT_AUTHOR_NAME="$name" \
                GIT_AUTHOR_EMAIL="$name@mail.com" \
                GIT_AUTHOR_DATE="2025-05-07T12:00:00" \
                GIT_COMMITTER_NAME="$name" \
                GIT_COMMITTER_EMAIL="$name@mail.com" \
                GIT_COMMITTER_DATE="2025-05-07T12:00:00" \
                git commit-tree "$tree_hash" -m "$name joined the chatroom")

  git update-ref "refs/heads/$name" "$commit_hash"
  git symbolic-ref HEAD "refs/heads/$name"
}

#######################################
# Post a message as a new commit with deterministic metadata
# Arguments:
#   message
#######################################
post() {
  message=$1

  # Ensure weâ€™re inside a git repo
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    for dir in */; do
      if [ -d "$dir/.git" ]; then
        cd "$dir"
        break
      fi
    done
  fi

  git fetch --all

  branch=$(git symbolic-ref --short HEAD)
  empty_tree=$(echo -n "" | git mktree)

  parents=""
  for ref in $(git for-each-ref --format='%(refname)' | sort); do
    commit_id=$(git rev-parse "$ref" 2>/dev/null)
    parents="$parents -p $commit_id"
  done

  commit_hash=$(GIT_AUTHOR_NAME="$branch" \
                GIT_AUTHOR_EMAIL="$branch@mail.com" \
                GIT_AUTHOR_DATE="2025-05-07T12:00:00" \
                GIT_COMMITTER_NAME="$branch" \
                GIT_COMMITTER_EMAIL="$branch@mail.com" \
                GIT_COMMITTER_DATE="2025-05-07T12:00:00" \
                git commit-tree "$empty_tree" $parents -m "$message")

  git update-ref "refs/heads/$branch" "$commit_hash"
}

#######################################
# Add a remote and fetch its branches
# Arguments:
#   path_to_remote_repo
#######################################
connect() {
  remote_path=$1

  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    for dir in */; do
      if [ -d "$dir/.git" ] && [ "$dir" != "$(basename "$remote_path")/" ]; then
        cd "$dir"
        break
      fi
    done
  fi

  remote_name=$(basename "$remote_path")
  git remote add "$remote_name" "$remote_path"
  git fetch "$remote_name"
  git remote set-head "$remote_name" -a
}

#######################################
# Push current branch to all remotes
#######################################
push() {
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    for dir in */; do
      if [ -d "$dir/.git" ]; then
        cd "$dir"
        break
      fi
    done
  fi

  branch=$(git symbolic-ref --short HEAD)
  for remote in $(git remote); do
    git push "$remote" "$branch"
  done
}

#######################################
# Show all commit logs in a readable format
#######################################
show() {
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    for dir in */; do
      if [ -d "$dir/.git" ]; then
        cd "$dir"
        break
      fi
    done
  fi

  LC_TIME=en_US.UTF-8 git log --all --topo-order \
    --pretty=format:'%Cred%an%Creset (%ad): %s' \
    --date=format:'%H:%M %p'
}

# Dispatch function call
cmd=$1
shift
"$cmd" "$@"
