#!/bin/bash
# Start script with: ./chat.sh <init, post, show, connect> <args>

# Makes the script stop on errors
set -e

#######################################
# Creates a git repo and a git user,
# commits an inital message
# Arguments:
#   name of the user
#######################################
init() {
  name=$1
  # TODO: implement function
  repoDir="$name"

  mkdir "$repoDir"
  cd "$repoDir"

  git init -b "$name"

  git config --local user.name "$name"
  git config --local user.email "$name@example.com"
  
  emptyTree=$(echo -n ""| git mktree)

  commitMsg="$name joined the chatroom"
  commitHash=$(echo "$commitMsg" | git commit-tree "$emptyTree")

  git update-ref refs/heads/"$name" "$commitHash"

  git symbolic-ref HEAD refs/heads/"$name"
}

#######################################
# Fetches from all remotes, commits an empty
# tree with a user commit message and pushes to all remotes
# Arguments:
#   The message to be sent
#######################################
post() {
  message=$1
  # TODO: implement function
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
	  for dir in */; do
		  if [ -d "$dir/.git" ]; then
			  cd "$dir"
			  break
		  fi
	  done
  fi


  git fetch --all

  branch=$(git symbolic-ref --short HEAD)

  parents=""
  for ref in $(git for-each-ref --format='%(refname)'); do
    commit_id=$(git rev-parse "$ref" 2>/dev/null)
    parents="$parents -p $commit_id"
  done

  empty_tree=$(echo -n "" | git mktree)
  new_commit=$(echo "$message" | git commit-tree $empty_tree $parents)

  git update-ref "refs/heads/$branch" "$new_commit"
}

#######################################
# Pushes local branch to the remote repositories
#######################################
push() {
  # TODO: implement function
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    for dir in */; do
      if [ -d "$dir/.git" ]; then
        cd "$dir"
        break
      fi
    done
  fi

  
  branch=$(git symbolic-ref --short HEAD)

  # Loop over all remotes and push current branch
  for remote in $(git remote); do 
    git push "$remote" "$branch"
  done
}



#######################################
# Prints the git log history in a pretty format
#######################################
show() {
  # TODO: implement function
  # pass
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    for dir in */; do
      if [ -d "$dir/.git" ]; then
        cd "$dir"
        break
      fi
    done
  fi
  

  #git log --reverse --pretty=format:"%an <%ad>: %s" --date=format:"%I:%M %p"
  LC_TIME=en_US.UTF-8 git log --all --topo-order --pretty=format:'%Cred%an%Creset (%ad): %s' --date=format:'%H:%M %p'
  
}



#######################################
# Tracks the remote branch in the local repository
# Arguments:
#  The remote branch path
#######################################
connect() {
  remote_repo=$1
  # TODO: implement function
 
  if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    for dir in */; do
      if [ -d "$dir/.git" ] && [ "$dir" != "$(basename "$remote_repo")/" ]; then
        cd "$dir"
        break
      fi
    done
  fi

  remote_name=$(basename "$remote_repo")
  git remote add "$remote_name" "$remote_repo"
  git fetch "$remote_name"
  git branch --track "$remote_name" "$remote_name/$remote_name"

}


f_call=$1
shift
$f_call "$@"